name: Build
on:
  push:
    branches:
    - 'master'
    paths-ignore:
    - '**.md'
    - '**.gitignore'
    - '**.opam'
    - '**.editorconfig'
    - 'LICENSE'
    - 'papers/**'
    - 'extra/docker/**'
  pull_request:
    paths-ignore:
    - '**.md'
    - '**.gitignore'
    - '**.opam'
    - '**.editorconfig'
    - 'LICENSE'
    - 'papers/**'
    - 'extra/docker/**'
permissions:
  contents: read
env:
  OCAML_COMILER_VERSION: "4.13.1"
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout branch ${{ github.ref_name }}
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Restore opam cache
        id: opam-cache
        uses: actions/cache@v3
        with:
          path: "~/.opam"
          key: opam-${{env.OCAML_COMILER_VERSION}}-${{hashFiles('.github/coq-concert.opam.locked')}}
          restore-keys: |
            opam-${{env.OCAML_COMILER_VERSION}}-

      - name: Set up OCaml
        uses: avsm/setup-ocaml@v1
        with:
          ocaml-version: ${{env.OCAML_COMILER_VERSION}}

      - name: Build dependencies
        if: ${{ ! steps.opam-cache.outputs.cache-hit }}
        run: |
          opam repo add coq-released https://coq.inria.fr/opam/released
          opam install --deps-only -j2 .github/coq-concert.opam.locked
          opam clean -a -c -s --logs

      - name: Set up environment
        run: |
          echo "::group::Setting up problem matcher"
          echo "::add-matcher::./.github/coq-errors.json"
          echo "::endgroup::"

      - name: Build core
        run: |
          echo "::group::Build utilities"
          opam exec -- make -j2 utils
          echo "::endgroup::"

          echo "::group::Build execution layer"
          opam exec -- make -j2 execution
          echo "::endgroup::"

          echo "::group::Build embedding layer"
          opam exec -- make -j2 embedding
          echo "::endgroup::"

          echo "::group::Build extraction layer"
          opam exec -- make -j2 typed-extraction extraction
          echo "::endgroup::"

      - name: Build examples
        run: |
          echo "::group::Build examples"
          opam exec -- make -j2 examples
          echo "::endgroup::"

      - name: Build documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo "::group::Running coqdoc"
          opam exec -- make -j2 html
          echo "::endgroup::"

          echo "::group::Install dependencies"
          opam install -y coq-dpdgraph
          sudo apt install -y graphviz
          echo "::endgroup::"

          echo "::group::Generate dependency graphs"
          rm -rf docs/graphs
          mkdir -p docs
          mkdir -p docs/graphs

          opam exec -- make dependency-graphs
          mv utils/svg/* docs/graphs/
          mv execution/svg/* docs/graphs/
          mv embedding/svg/* docs/graphs/
          mv extraction/svg/* docs/graphs/
          mv examples/svg/* docs/graphs/
          echo "::endgroup::"

      - name: Prepare documentation for deployment
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: actions/upload-pages-artifact@v1
        with:
          path: docs

  deploy-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
